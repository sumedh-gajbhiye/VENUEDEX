<%- include ('../partials/header'); -%>
<!-- <script src="https://api.mapbox.com/mapbox-gl-js/v1.9.1/mapbox-gl.js"></script>
<link href="https://api.mapbox.com/mapbox-gl-js/v1.9.1/mapbox-gl.css" rel="stylesheet" />
<script src="https://code.jquery.com/jquery-3.4.1.js" type="text/javascript"></script>
<script src="https://unpkg.com/@mapbox/mapbox-sdk/umd/mapbox-sdk.min.js"></script> -->
<!-- <style>
  * {
      box-sizing: border-box;
  }

  body {
      font: 16px Arial;
  }

  /*the container must be positioned relative:*/
  .autocomplete {
      position: relative;
      display: inline-block;
  }

  input {
      border: 1px solid transparent;
      background-color: #f1f1f1;
      padding: 10px;
      font-size: 16px;
  }

  input[type=text] {
      background-color: #f1f1f1;
      width: 100%;
  }

  input[type=submit] {
      background-color: DodgerBlue;
      color: #fff;
      cursor: pointer;
  }

  .autocomplete-items {
      position: absolute;
      border: 1px solid #d4d4d4;
      border-bottom: none;
      border-top: none;
      z-index: 99;
      /*position the autocomplete items to be the same width as the container:*/
      top: 100%;
      left: 0;
      right: 0;
  }

  .autocomplete-items div {
      padding: 10px;
      cursor: pointer;
      background-color: #fff;
      border-bottom: 1px solid #d4d4d4;
  }

  /*when hovering an item:*/
  .autocomplete-items div:hover {
      background-color: #e9e9e9;
  }

  /*when navigating through the items using the arrow keys:*/
  .autocomplete-active {
      background-color: DodgerBlue !important;
      color: #ffffff;
  }
</style> -->
<!-- <meta name="viewport" content="width=device-width, initial-scale=1.0"> -->

<!-- <head>
  <meta charset="utf-8"/>
  <title>Add a geocoder</title>
  <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no"/>

  <script src="https://code.jquery.com/jquery-3.4.1.js" type="text/javascript"></script>
  <script src="https://unpkg.com/@mapbox/mapbox-sdk/umd/mapbox-sdk.min.js"></script>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
      * {
          box-sizing: border-box;
      }

      body {
          font: 16px Arial;
      }

      /*the container must be positioned relative:*/
      .autocomplete {
          position: relative;
          display: inline-block;
      }

      input {
          border: 1px solid transparent;
          background-color: #f1f1f1;
          padding: 10px;
          font-size: 16px;
      }

      input[type=text] {
          background-color: #f1f1f1;
          width: 100%;
      }

      input[type=submit] {
          background-color: DodgerBlue;
          color: #fff;
          cursor: pointer;
      }

      .autocomplete-items {
          position: absolute;
          border: 1px solid #d4d4d4;
          border-bottom: none;
          border-top: none;
          z-index: 99;
          /*position the autocomplete items to be the same width as the container:*/
          top: 100%;
          left: 0;
          right: 0;
          color : black
      }

      .autocomplete-items div {
          padding: 10px;
          cursor: pointer;
          background-color: #fff;
          border-bottom: 1px solid #d4d4d4;
      }

      /*when hovering an item:*/
      .autocomplete-items div:hover {
          background-color: #e9e9e9;
      }

      /*when navigating through the items using the arrow keys:*/
      .autocomplete-active {
          background-color: DodgerBlue !important;
          color: #ffffff;
      }
  </style>
</head> -->
<h1 class="text-center">Create a new venue here</h1>
<div class="container">
  <div class="row">
    <div style="width: 50%; margin: 30px auto;">
      <form action="/campgrounds" method="POST" enctype="multipart/form-data" autocomplete="off">
        <div class="form-group">
          <label for="name">Venue Name</label>
          <input class="form-control" type="text" name="campground[name]" required>
        </div>
        <div class="form-group">
          <label for="image">Image</label>
          <input type="file" id="image" name="image" accept="image/*" required>
        </div>
        <!-- <div class="form-group autocomplete">
          <label for="location">Location</label>
          <input class="form-control" id="myInput" type="text" name="campground[location]" id="location">
      </div> -->
      <div class="form-group">
        <label for="location">Location</label>
        <input class="form-control" id="location" type="text" name="campground[location]" id="location">
    </div>
        <!-- <div id="radio" class="form-group">
            <p>Select Category: </p>
            <label class="radio-inline"><input type="radio" name="campground[category]" value="mall" checked>mall</label>
            <label class="radio-inline"><input type="radio" name="campground[category]" value="restaurant">restaurant</label>
            <label class="radio-inline"><input type="radio" name="campground[category]" value="hotel">hotel</label>
        </div> -->
        <div class="form-group">
          <label for="description">Venue Description</label>
          <textarea name="campground[description]" class="form-control" rows="15"></textarea>
        </div>
        <div class="form-group">
          <button class="btn btn-lg btn-success btn-block">Submit</button>
        </div>
      </form>
      <a href="/campgrounds">Go back</a>
    </div>
  </div>
</div>
<!-- <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.5.1/mapbox-gl-geocoder.min.js"></script>
<link
rel="stylesheet"
href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.5.1/mapbox-gl-geocoder.css"
type="text/css" -->

<!-- <script>
  mapboxgl.accessToken = 'pk.eyJ1Ijoic2pnc2VuaW9yIiwiYSI6ImNrOWdvNGMwNDA0dWozaG13djl2Z2Z6ZzEifQ.rVHzCFfbsoBvRLBdfoEIbA';
var geocoder = new MapboxGeocoder({
    accessToken: mapboxgl.accessToken,
    types: 'region,place,postcode,locality,neighborhood'
});

geocoder.addTo('#geocoder');
</script> -->

<!-- <script>

  var geocodingClient = mapboxSdk({accessToken: 'pk.eyJ1Ijoic2pnc2VuaW9yIiwiYSI6ImNrOWdvNGMwNDA0dWozaG13djl2Z2Z6ZzEifQ.rVHzCFfbsoBvRLBdfoEIbA'});

  function autocompleteSuggestionMapBoxAPI(inputParams, callback) {
      geocodingClient.geocoding.forwardGeocode({
          query: inputParams,
          countries: ['In'],
          autocomplete: true,
          limit: 4,
      })
          .send()
          .then(response => {
              const match = response.body;
              callback(match);
          });
  }

  function autocompleteInputBox(inp) {
      var currentFocus;
      inp.addEventListener("input", function (e) {
          var a, b, i, val = this.value;
          closeAllLists();
          if (!val) {
              return false;
          }
          currentFocus = -1;
          a = document.createElement("DIV");
          a.setAttribute("id", this.id + "autocomplete-list");
          a.setAttribute("class", "autocomplete-items");
          this.parentNode.appendChild(a);

          // suggestion list MapBox api called with callback
          autocompleteSuggestionMapBoxAPI($('#myInput').val(), function (results) {
              results.features.forEach(function (key) {
                  b = document.createElement("DIV");
                  b.innerHTML = "<strong>" + key.place_name.substr(0, val.length) + "</strong>";
                  b.innerHTML += key.place_name.substr(val.length);
                  b.innerHTML += "<input type='hidden' data-lat='" + key.geometry.coordinates[1] + "' data-lng='" + key.geometry.coordinates[0] + "'  value='" + key.place_name + "'>";
                  b.addEventListener("click", function (e) {
                      let lat = $(this).find('input').attr('data-lat');
                      let long = $(this).find('input').attr('data-lng');
                      inp.value = $(this).find('input').val();
                      $(inp).attr('data-lat', lat);
                      $(inp).attr('data-lng', long);
                      closeAllLists();
                  });
                  a.appendChild(b);
              });
          })
      });


      /*execute a function presses a key on the keyboard:*/
      inp.addEventListener("keydown", function (e) {
          var x = document.getElementById(this.id + "autocomplete-list");
          if (x) x = x.getElementsByTagName("div");
          if (e.keyCode == 40) {
              /*If the arrow DOWN key is pressed,
              increase the currentFocus variable:*/
              currentFocus++;
              /*and and make the current item more visible:*/
              addActive(x);
          } else if (e.keyCode == 38) { //up
              /*If the arrow UP key is pressed,
              decrease the currentFocus variable:*/
              currentFocus--;
              /*and and make the current item more visible:*/
              addActive(x);
          } else if (e.keyCode == 13) {
              /*If the ENTER key is pressed, prevent the form from being submitted,*/
              e.preventDefault();
              if (currentFocus > -1) {
                  /*and simulate a click on the "active" item:*/
                  if (x) x[currentFocus].click();
              }
          }
      });

      function addActive(x) {
          /*a function to classify an item as "active":*/
          if (!x) return false;
          /*start by removing the "active" class on all items:*/
          removeActive(x);
          if (currentFocus >= x.length) currentFocus = 0;
          if (currentFocus < 0) currentFocus = (x.length - 1);
          /*add class "autocomplete-active":*/
          x[currentFocus].classList.add("autocomplete-active");
      }

      function removeActive(x) {
          /*a function to remove the "active" class from all autocomplete items:*/
          for (var i = 0; i < x.length; i++) {
              x[i].classList.remove("autocomplete-active");
          }
      }

      function closeAllLists(elmnt) {
          /*close all autocomplete lists in the document,
          except the one passed as an argument:*/
          var x = document.getElementsByClassName("autocomplete-items");
          for (var i = 0; i < x.length; i++) {
              if (elmnt != x[i] && elmnt != inp) {
                  x[i].parentNode.removeChild(x[i]);
              }
          }
      }

      /*execute a function when someone clicks in the document:*/
      document.addEventListener("click", function (e) {
          closeAllLists(e.target);
      });
  }

  autocompleteInputBox(document.getElementById("myInput"));
</script> -->





<%- include ('../partials/footer'); -%>